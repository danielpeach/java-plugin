dependencies {
  apply plugin: "org.jetbrains.dokka"
  apply plugin: "nebula.maven-publish"
  apply plugin: "jacoco"
  apply plugin: "signing"

  implementation "org.slf4j:slf4j-simple:1.7.29"
  implementation "io.netty:netty-transport-native-kqueue:4.1.52.Final"
  implementation "io.netty:netty-all:4.1.52.Final"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
  implementation "org.bouncycastle:bcpkix-jdk15on:1.68"

  testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
  testImplementation "io.strikt:strikt-core:0.31.0"
  testImplementation "dev.minutest:minutest:1.13.0"
  testImplementation "io.mockk:mockk:1.9.3"

  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.0"
  testRuntime "org.junit.platform:junit-platform-launcher:1.4.0"
  testRuntime "org.junit.platform:junit-platform-commons:1.5.2"
}

publishing {
  publications {
    description = "A plugin framework for JVM projects"
    nebula {
      pom {
        url = "https://github.com/danielpeach/java-plugin"
        licenses {
          license {
            name = "The Apache License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }
        developers {
          developer {
            id = "danielpeach"
            name = "Dan Peach"
            email = "peach.daniel at gmail.com"
          }
        }
        inceptionYear = "2021"
        scm {
          connection = "scm:git:git://github.com/danielpeach/java-plugin.git"
          developerConnection = "scm:git:ssh://github.com/danielpeach/java-plugin.git"
          url = "http://github.com/danielpeach/java-plugin/"
        }
        issueManagement {
          system = "GitHub Issues"
          url = "https://github.com/danielpeach/java-plugin/issues"
        }
      }

      def javadocTask = tasks.findByName("dokkaJavadoc")
      def dokkaJar = project.task(type: Jar, "dokkaJar") {
        archiveClassifier.set("javadoc")
        from(javadocTask)
      }
      artifact(dokkaJar)

      def sourceJar = project.task(type: Jar, "sourceJar") {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
      }
      artifact(sourceJar)
    }
  }
}

signing {
  def key = project.hasProperty("signingKey") ? project.getProperty("signingKey") : ""
  def password = project.hasProperty("signingPassword") ? project.getProperty("signingPassword") : ""
  useInMemoryPgpKeys(key, password)
  sign(publishing.publications["nebula"])
}

jacocoTestReport {
  dependsOn test
  reports {
    csv.enabled = true
  }

  afterEvaluate {
    getClassDirectories().setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        '**/plugin/grpc/**'
      ])
    }))
  }
}

test {
  jacoco {
    excludes = [
      "**/plugin/grpc/**"
    ]
  }
}
